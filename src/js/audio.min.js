let audioContext,
  soundEnabled = !0;
function initAudio() {
  try {
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
  } catch (e) {
    /* Audio not supported */
  }
}
function playSound(e = 440, n = 0.1) {
  if (!soundEnabled || !audioContext) return;
  const t = audioContext.createOscillator(),
    o = audioContext.createGain();
  (t.connect(o),
    o.connect(audioContext.destination),
    (t.frequency.value = e),
    (t.type = 'sine'),
    o.gain.setValueAtTime(0.1, audioContext.currentTime),
    o.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + n),
    t.start(audioContext.currentTime),
    t.stop(audioContext.currentTime + n));
}
function initSoundToggle() {
  const e = document.getElementById('sound-toggle');
  e &&
    ((soundEnabled = 'disabled' !== localStorage.getItem('sound')),
    (e.querySelector('.icon').textContent = soundEnabled ? 'ðŸ”Š' : 'ðŸ”‡'),
    e.addEventListener('click', () => {
      ((soundEnabled = !soundEnabled),
        (e.querySelector('.icon').textContent = soundEnabled ? 'ðŸ”Š' : 'ðŸ”‡'),
        localStorage.setItem('sound', soundEnabled ? 'enabled' : 'disabled'),
        playSound(659, 0.1));
    }),
    e.addEventListener('keydown', n => {
      ('Enter' !== n.key && ' ' !== n.key) || (n.preventDefault(), e.click());
    }));
}
if ('undefined' !== typeof window) {
  const e = () => {
    audioContext && 'suspended' === audioContext.state && audioContext.resume();
  };
  (window.addEventListener('touchstart', e, { once: !0 }),
    window.addEventListener('click', e, { once: !0 }));
}
